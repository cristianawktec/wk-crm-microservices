#!/bin/bash

# üè• System Health Check
# Verifica sa√∫de geral do sistema ap√≥s deploy

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_title() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Contador de erros
ERROR_COUNT=0

add_error() {
    ERROR_COUNT=$((ERROR_COUNT + 1))
    print_error "$1"
}

print_title "üè• WK CRM - System Health Check"

echo "üìä Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üñ•Ô∏è  Servidor: $(hostname)"
echo "üìç IP: $(curl -s ifconfig.me 2>/dev/null || echo 'N/A')"
echo ""

# 1. Verificar servi√ßos essenciais
print_step "üîß Verificando servi√ßos essenciais..."

SERVICES=("nginx" "php8.2-fpm" "postgresql")
for service in "${SERVICES[@]}"; do
    if systemctl is-active --quiet $service; then
        print_step "‚úÖ $service: ATIVO"
    else
        add_error "‚ùå $service: INATIVO"
    fi
done

echo ""

# 2. Verificar portas essenciais
print_step "üåê Verificando portas essenciais..."

PORTS=("80:HTTP" "443:HTTPS" "5432:PostgreSQL")
for port_desc in "${PORTS[@]}"; do
    port=$(echo $port_desc | cut -d: -f1)
    desc=$(echo $port_desc | cut -d: -f2)
    
    if netstat -tuln | grep -q ":$port "; then
        print_step "‚úÖ Porta $port ($desc): ABERTA"
    else
        add_error "‚ùå Porta $port ($desc): FECHADA"
    fi
done

echo ""

# 3. Verificar configura√ß√£o do Nginx
print_step "‚öôÔ∏è  Verificando configura√ß√£o do Nginx..."

if nginx -t >/dev/null 2>&1; then
    print_step "‚úÖ Configura√ß√£o do Nginx: V√ÅLIDA"
else
    add_error "‚ùå Configura√ß√£o do Nginx: INV√ÅLIDA"
fi

echo ""

# 4. Verificar certificados SSL
print_step "üîí Verificando certificados SSL..."

DOMAINS=("api.consultoriawk.com" "admin.consultoriawk.com")
for domain in "${DOMAINS[@]}"; do
    if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
        # Verificar data de expira√ß√£o
        EXPIRY_DATE=$(openssl x509 -enddate -noout -in "/etc/letsencrypt/live/$domain/fullchain.pem" | cut -d= -f2)
        EXPIRY_EPOCH=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null || echo "0")
        CURRENT_EPOCH=$(date +%s)
        DAYS_LEFT=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
        
        if [ $DAYS_LEFT -gt 7 ]; then
            print_step "‚úÖ SSL $domain: V√°lido por $DAYS_LEFT dias"
        elif [ $DAYS_LEFT -gt 0 ]; then
            print_warning "‚ö†Ô∏è  SSL $domain: Expira em $DAYS_LEFT dias"
        else
            add_error "‚ùå SSL $domain: EXPIRADO h√° $((-DAYS_LEFT)) dias"
        fi
    else
        add_error "‚ùå SSL $domain: Certificado n√£o encontrado"
    fi
done

echo ""

# 5. Verificar conectividade das URLs
print_step "üåê Verificando conectividade das URLs..."

URLS=(
    "https://api.consultoriawk.com/api/health:API Health"
    "https://admin.consultoriawk.com/:AdminLTE"
)

for url_desc in "${URLS[@]}"; do
    url=$(echo $url_desc | cut -d: -f1)
    desc=$(echo $url_desc | cut -d: -f2)
    
    if curl -f -s --max-time 10 "$url" >/dev/null 2>&1; then
        print_step "‚úÖ $desc: ACESS√çVEL"
    else
        add_error "‚ùå $desc: INACESS√çVEL ($url)"
    fi
done

echo ""

# 6. Verificar espa√ßo em disco
print_step "üíæ Verificando espa√ßo em disco..."

DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ $DISK_USAGE -lt 80 ]; then
    print_step "‚úÖ Espa√ßo em disco: ${DISK_USAGE}% usado"
elif [ $DISK_USAGE -lt 90 ]; then
    print_warning "‚ö†Ô∏è  Espa√ßo em disco: ${DISK_USAGE}% usado (ATEN√á√ÉO)"
else
    add_error "‚ùå Espa√ßo em disco: ${DISK_USAGE}% usado (CR√çTICO)"
fi

echo ""

# 7. Verificar mem√≥ria
print_step "üß† Verificando uso de mem√≥ria..."

MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2 }')
if [ $MEM_USAGE -lt 80 ]; then
    print_step "‚úÖ Uso de mem√≥ria: ${MEM_USAGE}%"
elif [ $MEM_USAGE -lt 90 ]; then
    print_warning "‚ö†Ô∏è  Uso de mem√≥ria: ${MEM_USAGE}% (ATEN√á√ÉO)"
else
    add_error "‚ùå Uso de mem√≥ria: ${MEM_USAGE}% (CR√çTICO)"
fi

echo ""

# 8. Verificar logs de erro recentes
print_step "üìù Verificando logs de erro recentes..."

ERROR_LOGS=(
    "/var/log/nginx/error.log"
    "/opt/wk-crm/wk-crm-laravel/storage/logs/laravel.log"
    "/var/log/php8.2-fpm.log"
)

for log_file in "${ERROR_LOGS[@]}"; do
    if [ -f "$log_file" ]; then
        RECENT_ERRORS=$(tail -100 "$log_file" | grep -i error | wc -l)
        if [ $RECENT_ERRORS -eq 0 ]; then
            print_step "‚úÖ $log_file: Sem erros recentes"
        elif [ $RECENT_ERRORS -lt 5 ]; then
            print_warning "‚ö†Ô∏è  $log_file: $RECENT_ERRORS erros recentes"
        else
            add_error "‚ùå $log_file: $RECENT_ERRORS erros recentes (CR√çTICO)"
        fi
    else
        print_warning "‚ö†Ô∏è  Log n√£o encontrado: $log_file"
    fi
done

echo ""
print_title "üìä RESUMO DO HEALTH CHECK"

if [ $ERROR_COUNT -eq 0 ]; then
    print_step "üéâ SISTEMA SAUD√ÅVEL - Nenhum problema encontrado!"
    echo "‚úÖ Todos os servi√ßos est√£o funcionando corretamente"
    echo "‚úÖ URLs acess√≠veis externamente"
    echo "‚úÖ Certificados SSL v√°lidos"
    echo "‚úÖ Recursos do sistema OK"
    exit 0
elif [ $ERROR_COUNT -lt 3 ]; then
    print_warning "‚ö†Ô∏è  ATEN√á√ÉO - $ERROR_COUNT problema(s) encontrado(s)"
    echo "üìã Verifique os itens marcados com ‚ùå acima"
    exit 1
else
    print_error "üö® CR√çTICO - $ERROR_COUNT problemas encontrados!"
    echo "üîß Interven√ß√£o necess√°ria imediatamente"
    echo "üìû Contate o administrador do sistema"
    exit 2
fi