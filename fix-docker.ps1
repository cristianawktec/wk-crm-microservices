# WK CRM Brasil - Docker Desktop PowerShell Fix
# Script para habilitar recursos necess√°rios no Windows

param(
    [switch]$Force = $false
)

Write-Host "üê≥ WK CRM Brasil - Docker Desktop Fix" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray

# Verificar se est√° rodando como administrador
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ùå Este script precisa ser executado como ADMINISTRADOR!" -ForegroundColor Red
    Write-Host ""
    Write-Host "Solu√ß√µes:" -ForegroundColor Yellow
    Write-Host "1. Clique com bot√£o direito no PowerShell e 'Executar como administrador'" -ForegroundColor White
    Write-Host "2. Ou execute: Start-Process PowerShell -Verb RunAs" -ForegroundColor White
    Write-Host ""
    pause
    exit 1
}

Write-Host "‚úÖ Executando como administrador!" -ForegroundColor Green
Write-Host ""

# Verificar vers√£o do Windows
$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
Write-Host "üíª Sistema: $($osInfo.Caption) - Build $($osInfo.BuildNumber)" -ForegroundColor Cyan

# Verificar se WSL2 est√° dispon√≠vel
if ($osInfo.BuildNumber -lt 18362) {
    Write-Host "‚ùå Windows muito antigo para WSL2. Build m√≠nimo: 18362" -ForegroundColor Red
    Write-Host "Considere atualizar o Windows ou usar Docker Toolbox." -ForegroundColor Yellow
    pause
    exit 1
}

Write-Host "‚úÖ Windows compat√≠vel com WSL2!" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para habilitar recursos
function Enable-WindowsFeature {
    param($FeatureName, $DisplayName)
    
    Write-Host "üîß Habilitando $DisplayName..." -ForegroundColor Yellow
    
    try {
        $result = Enable-WindowsOptionalFeature -Online -FeatureName $FeatureName -All -NoRestart
        if ($result.RestartNeeded) {
            Write-Host "‚úÖ $DisplayName habilitado (requer reinicializa√ß√£o)" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚úÖ $DisplayName j√° estava habilitado" -ForegroundColor Green
            return $false
        }
    } catch {
        Write-Host "‚ö†Ô∏è Erro ao habilitar $DisplayName : $($_.Exception.Message)" -ForegroundColor Yellow
        return $false
    }
}

# Habilitar recursos necess√°rios
$needsRestart = $false

$needsRestart = (Enable-WindowsFeature -FeatureName "VirtualMachinePlatform" -DisplayName "Virtual Machine Platform") -or $needsRestart
$needsRestart = (Enable-WindowsFeature -FeatureName "Microsoft-Windows-Subsystem-Linux" -DisplayName "Windows Subsystem for Linux") -or $needsRestart

# Tentar habilitar Hyper-V (s√≥ funciona em Windows Pro/Enterprise)
try {
    $needsRestart = (Enable-WindowsFeature -FeatureName "Microsoft-Hyper-V-All" -DisplayName "Hyper-V") -or $needsRestart
} catch {
    Write-Host "‚ÑπÔ∏è Hyper-V n√£o dispon√≠vel (Windows Home Edition)" -ForegroundColor Cyan
}

Write-Host ""

# Verificar se WSL2 est√° instalado
Write-Host "üîß Verificando WSL2..." -ForegroundColor Yellow
try {
    $wslVersion = wsl --version 2>$null
    if ($wslVersion) {
        Write-Host "‚úÖ WSL2 est√° instalado!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è WSL2 n√£o encontrado, instalando..." -ForegroundColor Yellow
        wsl --install --no-distribution
        $needsRestart = $true
    }
} catch {
    Write-Host "‚ö†Ô∏è WSL2 precisa ser instalado manualmente" -ForegroundColor Yellow
    Write-Host "Execute: wsl --install" -ForegroundColor White
}

Write-Host ""

# Definir WSL2 como padr√£o
Write-Host "üîß Configurando WSL2 como padr√£o..." -ForegroundColor Yellow
try {
    wsl --set-default-version 2
    Write-Host "‚úÖ WSL2 definido como padr√£o!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Configure manualmente: wsl --set-default-version 2" -ForegroundColor Yellow
}

Write-Host ""

# Verificar Docker Desktop
Write-Host "üê≥ Verificando Docker Desktop..." -ForegroundColor Yellow
$dockerPath = "${env:ProgramFiles}\Docker\Docker\Docker Desktop.exe"
if (Test-Path $dockerPath) {
    Write-Host "‚úÖ Docker Desktop encontrado!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Docker Desktop n√£o encontrado!" -ForegroundColor Red
    Write-Host "Baixe em: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" -ForegroundColor White
}

Write-Host ""
Write-Host "üìã Resumo das corre√ß√µes:" -ForegroundColor Cyan
Write-Host "‚úÖ Virtual Machine Platform: Habilitado" -ForegroundColor Green
Write-Host "‚úÖ Windows Subsystem for Linux: Habilitado" -ForegroundColor Green
Write-Host "‚úÖ WSL2: Configurado como padr√£o" -ForegroundColor Green

if ($needsRestart) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è REINICIALIZA√á√ÉO NECESS√ÅRIA!" -ForegroundColor Red
    Write-Host ""
    Write-Host "Ap√≥s reiniciar:" -ForegroundColor Yellow
    Write-Host "1. Abra o Docker Desktop" -ForegroundColor White
    Write-Host "2. Execute: .\start-quick.bat" -ForegroundColor White
    Write-Host "3. Teste: docker --version" -ForegroundColor White
    Write-Host ""
    
    if ($Force -or (Read-Host "Reiniciar agora? (S/N)") -eq "S") {
        Write-Host "üîÑ Reiniciando em 10 segundos..." -ForegroundColor Yellow
        Start-Sleep 3
        Restart-Computer -Force
    }
} else {
    Write-Host ""
    Write-Host "üéâ Tudo configurado! Tente iniciar o Docker Desktop agora." -ForegroundColor Green
    Write-Host ""
    Write-Host "Se ainda houver problemas:" -ForegroundColor Yellow
    Write-Host "1. Reinicie o computador manualmente" -ForegroundColor White
    Write-Host "2. Reinstale o Docker Desktop" -ForegroundColor White
    Write-Host "3. Verifique se a virtualiza√ß√£o est√° habilitada na BIOS" -ForegroundColor White
}